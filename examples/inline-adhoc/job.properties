#
# This is an example of a job that uses several INLINE ADHOC modules in which the code is specified INLINE in the options file properties.
# There are no external files to read or modules from the database. Everything is defined within these properties.
#
# This job will generate a random set of URIs and content to load into the database, and then delete them.
# A report of the actions is generated in an HTML output file.
#

# An inline XQuery module that generates a sequence of numbers
URIS-MODULE=INLINE-XQUERY|declare variable $COUNT external;let $uris := for $i in (1 to xs:int($COUNT)) return $i return ("PRE-BATCH-MODULE.COUNT="||$COUNT,count($uris), $uris)

# Custom property specifying the number of random numbers to generate
#   You could override with a System property i.e. gradle corb -PcorbOptionsFile=inline-adhoc-job/corb.properties -DURIS-MODULE.COUNT=100
#   or with a Gradle Project property i.e. gradle corb -PcorbOptionsFile=inline-adhoc-job/corb.properties -PURIS-MODULE.COUNT=100
URIS-MODULE.COUNT=100

# PreBatch task that will write the output of the PRE-BATCH-MODULE to a file.
#  Often used to write header rows for a CSV, or the start tag of the document element for XML output
PRE-BATCH-TASK=com.marklogic.developer.corb.PreBatchUpdateFileTask

# An inline XQuery module that receives the COUNT passed through from the URIS-MODULE and uses it to construct the start tag for the document with a total attribute
PRE-BATCH-MODULE=INLINE-XQUERY|declare variable $COUNT as xs:string external;<thead><tr><th colspan='2'>Generating {$COUNT} documents</th></tr><tr><th>index</th><th>URI</th></tr></thead>

# Static header content to write to the file
EXPORT-FILE-TOP-CONTENT={"data":[

# The process module is invoked for each of the URIs produced by the URIS-MODULE
#  this JavaScript module simply produces a row of the CSV with the random number, and a URI constructed from it.
PROCESS-MODULE=INLINE-XQUERY|declare variable $URI as xs:string external; let $uri := "/inline-adhoc-job/"||sem:uuid-string()||".xml" return (xdmp:document-insert($uri, <doc>{$URI}</doc>),xdmp:sleep(xdmp:random(100)),<tr><td>{$URI}</td><td>{$uri}</td></tr>)

# The process task is invoked after the PROCESS-MODULE.
#  This task appends the results of the PROCESS-MODULE to a single output file.
#  Alternatively, com.marklogic.developer.corb.ExportToFileTask would produce a different file for each PROCESS-MODULE result
PROCESS-TASK=com.marklogic.developer.corb.ExportBatchToFileTask

# The Post Batch task executes after all of the URIs have been processed.
# This task writes to the configured output file if there is a POST-BATCH-MODULE that generates output, or EXPORT-FILE-BOTTOM-CONTENT is defined
POST-BATCH-TASK=com.marklogic.developer.corb.PostBatchUpdateFileTask

# An inline adhoc JavaScript module that issues a query to find all of the documents inserted, delete them, and report how many were found
POST-BATCH-MODULE=INLINE-JAVASCRIPT|declareUpdate(); var dir = cts.uris("",null,cts.directoryQuery("/inline-adhoc-job/")); for (var uri of dir) { xdmp.documentDelete(uri); }"<tfooter><tr><th colspan='2'>Total Deleted:"+fn.count(dir)+"</th></tr></tfooter>"

# Static content to include at the end of the output file
EXPORT-FILE-BOTTOM-CONTENT=</table></body></html>

# The path to write all of the output to
EXPORT-FILE-NAME=build/inline-adhoc.html

# how many concurrent threads for the job to use to process all of the URI values generated by the URIS-MODULE
THREAD-COUNT=3
